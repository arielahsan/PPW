Traceback (most recent call last):
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/python/3.12.1/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/python/3.12.1/lib/python3.12/asyncio/base_events.py", line 684, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import requests
import pandas as pd
from google.colab import files

# Silahkan membuat api key dari https://dev.springernature.com/#api
api_key = "bd490ef933a3b910cb1757a3e6563e03"
isbn = "978-3-031-63497-0"

url = "https://api.springernature.com/meta/v2/json"
params = {
    "q": f"isbn:{isbn}",
    "api_key": api_key,
    "p": 10
}

response = requests.get(url, params=params)

if response.status_code == 200:
    data = response.json()
    records = data.get('records', [])

    # Membuat list kosong untuk menyimpan data
    data_list = []

    # Iterasi melalui setiap record dan mengambil data yang relevan
    for record in records:
        doi = record.get('doi', 'N/A')
        title = record.get('title', 'No title')
        abstract = record.get('abstract', 'No abstract')

        # Menambahkan data ke list
        data_list.append({
            'DOI': doi,
            'Title': title,
            'Abstract': abstract
        })

    # Membuat DataFrame dari list data
    df = pd.DataFrame(data_list)

    # Menentukan nama file CSV
    csv_filename = "springer_search_results.csv"

    # Menyimpan DataFrame ke file CSV
    df.to_csv(csv_filename, index=False)
    print(f"Data berhasil disimpan ke {csv_filename}")

    # Mengunduh file CSV dari Google Colab
    files.download(csv_filename)

else:
    print("Error:", response.status_code, response.text)
------------------


[31m---------------------------------------------------------------------------[39m
[31mModuleNotFoundError[39m                       Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[3][39m[32m, line 3[39m
[32m      1[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mrequests[39;00m
[32m      2[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mpandas[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mpd[39;00m
[32m----> [39m[32m3[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01mgoogle[39;00m[34;01m.[39;00m[34;01mcolab[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m files
[32m      5[39m [38;5;66;03m# Silahkan membuat api key dari https://dev.springernature.com/#api[39;00m
[32m      6[39m api_key = [33m"[39m[33mbd490ef933a3b910cb1757a3e6563e03[39m[33m"[39m

[31mModuleNotFoundError[39m: No module named 'google'

